* why
caddy is nice - but it's huge (~15k LOC) and not that easy to grok - i mainly want an http server that serves my blog (static) and
maybe proxies a few random services to the outside world. nginx or whatever would also be possible but i hope this will teach me something
about http servers and nginx is just so annoying to configure...
* todo
- tests (httptest)
  - not sure yet how i want to structure tests - seems hard to use the fixture pattern and i really like that one right now
  - e.g. for log other outputs are required - maybe i'll have to write tests by hand here
- middleware: [[https://blog.golang.org/http-tracing][tracing]], pprof
- systemd: socket activation
- systemd: paths for StateDirectory, LogsDirectory...
* limitations
- limited feature scope and configurability - the goal is something more barebones/simple
- no wildcard routing / certs
- no ecosystem of 3rd party middlewares
- no fancy caddyfile syntax - just json for now. what annoys me about other http servers is not the configuration format itself but
  how much you have to configure - i want the sane defaults thing from caddy but will keep json because i don't see value in adding the complexity
  of a custom configfile format (for now; i do like writing parsers...)
* misc
** git fs

type GitFS struct{ http.FileSystem }

func (fs *GitFS) Open(name string) (http.File, error) {
	switch path.Base(name) {
	// https://stackoverflow.com/questions/12605576/git-special-files
	case ".git", ".gitignore", ".gitattributes", ".gitmodules":
		return nil, os.ErrNotExist
	default:
		return fs.FileSystem.Open(name)
	}
}
* inspiration
- https://github.com/mholt/caddy/
- https://github.com/oklog/run/blob/master/group.go
